// Generated by gencpp from file grace_attn_msgs/TrackingReIDResult.msg
// DO NOT EDIT!


#ifndef GRACE_ATTN_MSGS_MESSAGE_TRACKINGREIDRESULT_H
#define GRACE_ATTN_MSGS_MESSAGE_TRACKINGREIDRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>
#include <std_msgs/Int64.h>
#include <hr_msgs/Person.h>

namespace grace_attn_msgs
{
template <class ContainerAllocator>
struct TrackingReIDResult_
{
  typedef TrackingReIDResult_<ContainerAllocator> Type;

  TrackingReIDResult_()
    : accompanying_frame()
    , bounding_box()
    , target_person()  {
    }
  TrackingReIDResult_(const ContainerAllocator& _alloc)
    : accompanying_frame(_alloc)
    , bounding_box(_alloc)
    , target_person(_alloc)  {
  (void)_alloc;
    }



   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _accompanying_frame_type;
  _accompanying_frame_type accompanying_frame;

   typedef std::vector< ::std_msgs::Int64_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::Int64_<ContainerAllocator> >> _bounding_box_type;
  _bounding_box_type bounding_box;

   typedef  ::hr_msgs::Person_<ContainerAllocator>  _target_person_type;
  _target_person_type target_person;





  typedef boost::shared_ptr< ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> const> ConstPtr;

}; // struct TrackingReIDResult_

typedef ::grace_attn_msgs::TrackingReIDResult_<std::allocator<void> > TrackingReIDResult;

typedef boost::shared_ptr< ::grace_attn_msgs::TrackingReIDResult > TrackingReIDResultPtr;
typedef boost::shared_ptr< ::grace_attn_msgs::TrackingReIDResult const> TrackingReIDResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator1> & lhs, const ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator2> & rhs)
{
  return lhs.accompanying_frame == rhs.accompanying_frame &&
    lhs.bounding_box == rhs.bounding_box &&
    lhs.target_person == rhs.target_person;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator1> & lhs, const ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace grace_attn_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26b9b313443164cd67c804c21e7d603c";
  }

  static const char* value(const ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26b9b313443164cdULL;
  static const uint64_t static_value2 = 0x67c804c21e7d603cULL;
};

template<class ContainerAllocator>
struct DataType< ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grace_attn_msgs/TrackingReIDResult";
  }

  static const char* value(const ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_msgs/Image accompanying_frame\n"
"std_msgs/Int64[] bounding_box #[width_1,height_1,width_2,height_2]\n"
"hr_msgs/Person target_person\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int64\n"
"int64 data\n"
"================================================================================\n"
"MSG: hr_msgs/Person\n"
"std_msgs/Header header\n"
"string id\n"
"hr_msgs/Face face\n"
"hr_msgs/Body body\n"
"================================================================================\n"
"MSG: hr_msgs/Face\n"
"std_msgs/Header header\n"
"string id\n"
"geometry_msgs/Pose left_gaze\n"
"geometry_msgs/Pose right_gaze\n"
"geometry_msgs/Vector3 gaze_angle\n"
"geometry_msgs/Point location\n"
"geometry_msgs/Pose head_pose\n"
"geometry_msgs/Point[] landmarks\n"
"hr_msgs/FacialActionUnit[] action_units\n"
"sensor_msgs/RegionOfInterest bounding_box\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: hr_msgs/FacialActionUnit\n"
"string name\n"
"float64 presence\n"
"float64 intensity\n"
"================================================================================\n"
"MSG: sensor_msgs/RegionOfInterest\n"
"# This message is used to specify a region of interest within an image.\n"
"#\n"
"# When used to specify the ROI setting of the camera when the image was\n"
"# taken, the height and width fields should either match the height and\n"
"# width fields for the associated image; or height = width = 0\n"
"# indicates that the full resolution image was captured.\n"
"\n"
"uint32 x_offset  # Leftmost pixel of the ROI\n"
"                 # (0 if the ROI includes the left edge of the image)\n"
"uint32 y_offset  # Topmost pixel of the ROI\n"
"                 # (0 if the ROI includes the top edge of the image)\n"
"uint32 height    # Height of ROI\n"
"uint32 width     # Width of ROI\n"
"\n"
"# True if a distinct rectified ROI should be calculated from the \"raw\"\n"
"# ROI in this message. Typically this should be False if the full image\n"
"# is captured (ROI not used), and True if a subwindow is captured (ROI\n"
"# used).\n"
"bool do_rectify\n"
"\n"
"================================================================================\n"
"MSG: hr_msgs/Body\n"
"std_msgs/Header header\n"
"string id\n"
"geometry_msgs/Point location\n"
"geometry_msgs/Point[] landmarks\n"
"string[] landmarks_names\n"
"sensor_msgs/RegionOfInterest bounding_box\n"
;
  }

  static const char* value(const ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accompanying_frame);
      stream.next(m.bounding_box);
      stream.next(m.target_person);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackingReIDResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grace_attn_msgs::TrackingReIDResult_<ContainerAllocator>& v)
  {
    s << indent << "accompanying_frame: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.accompanying_frame);
    s << indent << "bounding_box[]" << std::endl;
    for (size_t i = 0; i < v.bounding_box.size(); ++i)
    {
      s << indent << "  bounding_box[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Int64_<ContainerAllocator> >::stream(s, indent + "    ", v.bounding_box[i]);
    }
    s << indent << "target_person: ";
    s << std::endl;
    Printer< ::hr_msgs::Person_<ContainerAllocator> >::stream(s, indent + "  ", v.target_person);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRACE_ATTN_MSGS_MESSAGE_TRACKINGREIDRESULT_H
